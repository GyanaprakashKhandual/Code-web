[
  {
    "command": "git init",
    "description": "Initializes a new Git repository in the current directory"
  },
  {
    "command": "git clone <repo_url>",
    "description": "Clones an existing remote repository to your local machine"
  },
  {
    "command": "git status",
    "description": "Shows the current status of the working directory and staging area"
  },
  {
    "command": "git add <file>",
    "description": "Stages a specific file for the next commit"
  },
  {
    "command": "git add .",
    "description": "Stages all changes in the current directory"
  },
  {
    "command": "git commit -m \"message\"",
    "description": "Commits staged changes with a message"
  },
  {
    "command": "git log",
    "description": "Displays the commit history"
  },
  {
    "command": "git log --oneline",
    "description": "Shows a summarized one-line log for each commit"
  },
  {
    "command": "git branch",
    "description": "Lists all branches in the repository"
  },
  {
    "command": "git branch <branch_name>",
    "description": "Creates a new branch"
  },
  {
    "command": "git checkout <branch_name>",
    "description": "Switches to the specified branch"
  },
  {
    "command": "git checkout -b <branch_name>",
    "description": "Creates and switches to a new branch"
  },
  {
    "command": "git merge <branch_name>",
    "description": "Merges the specified branch into the current branch"
  },
  {
    "command": "git fetch",
    "description": "Downloads changes from the remote repository without merging"
  },
  {
    "command": "git pull",
    "description": "Fetches and merges changes from the remote repository"
  },
  {
    "command": "git push",
    "description": "Uploads local commits to the remote repository"
  },
  {
    "command": "git push -u origin <branch_name>",
    "description": "Pushes the branch and sets the upstream for future pushes"
  },
  {
    "command": "git remote -v",
    "description": "Shows the list of remote repositories"
  },
  {
    "command": "git remote add origin <url>",
    "description": "Adds a new remote repository"
  },
  {
    "command": "git diff",
    "description": "Shows the difference between the working directory and the staging area"
  },
  {
    "command": "git diff --staged",
    "description": "Shows the difference between the staged files and the last commit"
  },
  {
    "command": "git reset <file>",
    "description": "Unstages a file while keeping changes"
  },
  {
    "command": "git reset --hard",
    "description": "Resets the working directory and index to the last commit (all changes lost)"
  },
  {
    "command": "git reset --soft HEAD~1",
    "description": "Undo the last commit but keep the changes staged"
  },
  {
    "command": "git stash",
    "description": "Temporarily stashes uncommitted changes"
  },
  {
    "command": "git stash apply",
    "description": "Applies the most recent stashed changes"
  },
  {
    "command": "git stash pop",
    "description": "Applies and removes the latest stash"
  },
  {
    "command": "git tag",
    "description": "Lists all tags"
  },
  {
    "command": "git tag <tagname>",
    "description": "Creates a new tag for the current commit"
  },
  {
    "command": "git tag -a <tagname> -m \"message\"",
    "description": "Creates an annotated tag"
  },
  {
    "command": "git show <commit_hash>",
    "description": "Shows details of a specific commit"
  },
  {
    "command": "git rm <file>",
    "description": "Removes a file from the working directory and staging area"
  },
  {
    "command": "git mv old.txt new.txt",
    "description": "Renames or moves a file"
  },
  {
    "command": "git blame <file>",
    "description": "Shows who changed each line of a file and when"
  },
  {
    "command": "git clean -fd",
    "description": "Removes untracked files and directories"
  },
  {
    "command": "git cherry-pick <commit_hash>",
    "description": "Applies the changes from a specific commit to the current branch"
  },
  {
    "command": "git revert <commit_hash>",
    "description": "Reverts a specific commit by creating a new commit"
  },
  {
    "command": "git rebase <branch>",
    "description": "Reapplies commits on top of another base tip"
  },
  {
    "command": "git rebase -i HEAD~n",
    "description": "Interactively rebase the last n commits"
  },
  {
    "command": "git archive --format zip --output file.zip HEAD",
    "description": "Creates a zip archive of the latest commit"
  },
  {
    "command": "git config --global user.name \"Your Name\"",
    "description": "Sets the global Git username"
  },
  {
    "command": "git config --global user.email \"you@example.com\"",
    "description": "Sets the global Git email"
  },
  {
    "command": "git config --global core.editor \"nano\"",
    "description": "Sets the default editor for Git"
  },
  {
    "command": "git config --list",
    "description": "Lists all Git configuration settings"
  },
  {
    "command": "git bisect start",
    "description": "Starts a binary search to find a faulty commit"
  },
  {
    "command": "git bisect good <commit>",
    "description": "Marks a known good commit"
  },
  {
    "command": "git bisect bad <commit>",
    "description": "Marks a known bad commit"
  },
  {
    "command": "git submodule add <repo_url> path/",
    "description": "Adds a Git repository as a submodule"
  },
  {
    "command": "git submodule update --init",
    "description": "Initializes and fetches submodules"
  },
  {
    "command": "git reflog",
    "description": "Shows the history of HEAD changes"
  }
]
